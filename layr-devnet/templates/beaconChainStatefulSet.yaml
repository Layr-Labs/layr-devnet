apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "beaconChainName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "beaconChainName" . }}
spec:
  serviceName: {{ template "beaconChainName" . }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "beaconChainName" . }}
  template:
    metadata:
      labels:
        app: {{ template "beaconChainName" . }}
        tags.datadoghq.com/env: development
        tags.datadoghq.com/version: "0.0.1"
        tags.datadoghq.com/service: {{ template "beaconChainName" . }}
        admission.datadoghq.com/enabled: "true"
    spec:
      # serviceAccountName: {{ .Values.beaconChain.serviceAccountName }}
{{- if .Values.beaconChain.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.beaconChain.nodeSelector | indent 8 }}
{{- end }}
{{- $secretName := .Values.common.secret.name }}
      initContainers:
        - name: init-genesis
          image: {{ .Values.images.prysm.name }}:{{ .Values.images.prysm.tag }}
          imagePullPolicy: Always
          command:
            - "/layr-devnet/execution/initGenesis.sh"
          env:
{{- if .Values.beaconChain.env }}
{{- range $k, $v := .Values.beaconChain.env }}
            - name: {{ $k }}
              value: '{{ $v }}'
{{- end }}
{{- end }}
          {{- range $k, $v := .Values.common.secret.values }}
            - name: {{ template "formatEnvVarName" $k }}
              valueFrom:
                secretKeyRef:
                  key: {{ $k }}
                  name: {{ $secretName}}
          {{- end }}
{{- if .Values.beaconChain.volumeMounts }}
          volumeMounts:
{{ toYaml .Values.beaconChain.volumeMounts | indent 12 }}
{{- end}}
        - name: wait-for-geth
          image: {{ .Values.images.prysm.name }}:{{ .Values.images.prysm.tag }}
          imagePullPolicy: Always
          command: ["/bin/bash"]
          args:
            - "-c"
            - "sleep 15"
          env:
{{- if .Values.beaconChain.env }}
{{- range $k, $v := .Values.beaconChain.env }}
            - name: {{ $k }}
              value: '{{ $v }}'
{{- end }}
{{- end }}
          {{- range $k, $v := .Values.common.secret.values }}
            - name: {{ template "formatEnvVarName" $k }}
              valueFrom:
                secretKeyRef:
                  key: {{ $k }}
                  name: {{ $secretName}}
          {{- end }}
{{- if .Values.beaconChain.volumeMounts }}
          volumeMounts:
{{ toYaml .Values.beaconChain.volumeMounts | indent 12 }}
{{- end}}
      containers:
        - name: beacon-chain
          image: {{ .Values.images.prysm.name }}:{{ .Values.images.prysm.tag }}
          imagePullPolicy: Always
          command:
            - "/layr-devnet/consensus/start.sh"
          env:
{{- if .Values.beaconChain.env }}
{{- range $k, $v := .Values.beaconChain.env }}
            - name: {{ $k }}
              value: '{{ $v }}'
{{- end }}
{{- end }}
          {{- range $k, $v := .Values.common.secret.values }}
            - name: {{ template "formatEnvVarName" $k }}
              valueFrom:
                secretKeyRef:
                  key: {{ $k }}
                  name: {{ $secretName}}
          {{- end -}}
{{- if .Values.beaconChain.volumeMounts }}
          volumeMounts:
{{ toYaml .Values.beaconChain.volumeMounts | indent 12 }}
{{- end}}
{{- if .Values.beaconChain.resources }}
          resources:
{{ toYaml .Values.beaconChain.resources | indent 12 }}
{{- end}}
          ports:
{{- if .Values.beaconChain.ports }}
{{- range $k, $v := .Values.beaconChain.ports }}
            - containerPort: {{ $v.containerPort }}
              name: {{ $v.name }}
              protocol: {{ $v.protocol }}
{{- end }}
{{- end }}
{{- if .Values.beaconChain.volumes }}
      volumes:
{{ toYaml .Values.beaconChain.volumes | indent 8 }}
{{- end}}
  volumeClaimTemplates:
    - metadata:
        name: beacon-chain-data
      spec:
        accessModes:
          - ReadWriteMany
        storageClassName: efs
        resources:
          requests:
            storage: 10Gi
